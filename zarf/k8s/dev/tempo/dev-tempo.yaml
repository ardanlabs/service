apiVersion: v1
kind: Namespace
metadata:
  name: sales-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-conf
  namespace: sales-system
data:
  tempo.yaml: |
    usage_report:
      reporting_enabled: false

    server:
      http_listen_port: 3200

    distributor:
      receivers: # this configuration will listen on all ports and protocols that tempo is capable of.
        #jaeger: # the receives all come from the OpenTelemetry collector.  more configuration information can
          #protocols: # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
            #thrift_http:                   #
            #grpc:                          # for a production deployment you should only enable the receivers you need!
            #thrift_binary:
            #thrift_compact:
        #zipkin:
        otlp:
          protocols:
            http:
            grpc:
        #opencensus:

    ingester:
      trace_idle_period: 10s               # the length of time after a trace has not received spans to consider it complete and flush it
      max_block_bytes: 1_000_000           # cut the head block when it hits this size or ...
      max_block_duration: 5m               #   this much time passes

    compactor:
      compaction:
        compaction_window: 1h              # blocks in this time window will be compacted together
        max_block_bytes: 100_000_000       # maximum size of compacted blocks
        block_retention: 1h
        compacted_block_retention: 10m

    storage:
      trace:
        backend: local                     # backend configuration to use
        block:
          bloom_filter_false_positive: .05 # bloom filter false positive rate.  lower values create larger filters but fewer false positives
          v2_index_downsample_bytes: 1000     # number of bytes per index record
          v2_encoding: zstd                   # block encoding/compression.  options: none, gzip, lz4-64k, lz4-256k, lz4-1M, lz4, snappy, zstd, s2
        wal:
          path: /tmp/tempo/wal             # where to store the the wal locally
          v2_encoding: snappy              # wal encoding/compression.  options: none, gzip, lz4-64k, lz4-256k, lz4-1M, lz4, snappy, zstd, s2
        local:
          path: /tmp/tempo/blocks
        pool:
          max_workers: 100                 # worker pool determines the number of parallel requests to the object store backend
          queue_depth: 10000

    overrides:
      metrics_generator_processors: [ service-graphs, span-metrics ]

#    metrics_generator:
#      registry:
#        external_labels:
#          source: tempo
#          cluster: docker-compose
#      storage:
#        path: /tmp/tempo/generator/wal
#        remote_write:
#          - url: http://prometheus:9090/api/v1/write
#            send_exemplars: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo
  namespace: sales-system
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: tempo
  template:
    metadata:
      namespace: sales-system
      labels:
        app: tempo
    spec:
      containers:
        - image: grafana/tempo:2.4.0
          name: tempo
          ports:
            - containerPort: 14268
              hostPort: 14268
            - containerPort: 3200
              hostPort: 3200
            - containerPort: 4317
              hostPort: 4317
            - containerPort: 4318
              hostPort: 4318
            - containerPort: 9411
              hostPort: 9411
          args:
            - -config.file=/tempo-conf/tempo.yaml
          volumeMounts:
            - name: config-volume
              mountPath: /tempo-conf
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 3400m
      volumes:
        - name: config-volume
          configMap:
            name: tempo-conf
---
apiVersion: v1
kind: Service
metadata:
  name: tempo
  namespace: sales-system
spec:
  type: ClusterIP
  selector:
    app: tempo
  ports:
    - port: 14268
      name: "14268"
    - port: 3200
      name: "3200"
    - port: 4317
      name: "4317"
    - port: 4318
      name: "4318"
    - port: 9411
      name: "9411"
