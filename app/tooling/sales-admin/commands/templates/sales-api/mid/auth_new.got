package mid

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"github.com/ardanlabs/service/business/core/{{.DomainL}}"
	"github.com/ardanlabs/service/business/web/v1/auth"
	"github.com/ardanlabs/service/business/web/v1/response"
	"github.com/ardanlabs/service/foundation/web"
	"github.com/google/uuid"
)

type ctx{{.DomainU}}Key int

const {{.DomainL}}Key ctx{{.DomainU}}Key = 1

// Get{{.DomainU}} returns the {{.DomainL}} from the context.
func Get{{.DomainU}}(ctx context.Context) {{.DomainL}}.{{.DomainU}} {
	v, ok := ctx.Value({{.DomainL}}Key).({{.DomainL}}.{{.DomainU}})
	if !ok {
		return {{.DomainL}}.{{.DomainU}}{}
	}
	return v
}

func set{{.DomainU}}(ctx context.Context, {{.DomainVar}} {{.DomainL}}.{{.DomainU}}) context.Context {
	return context.WithValue(ctx, {{.DomainL}}Key, {{.DomainVar}})
}

// =============================================================================

// Authorize{{.DomainU}} executes the specified role and extracts the specified
// {{.DomainL}} from the DB if a {{.DomainL}} id is specified in the call.
func Authorize{{.DomainU}}(a *auth.Auth, rule string, {{.DomainVar}}Core *{{.DomainL}}.Core) web.Middleware {
	m := func(handler web.Handler) web.Handler {
		h := func(ctx context.Context, w http.ResponseWriter, r *http.Request) error {
            var userID uuid.UUID

			if id := web.Param(r, "{{.DomainL}}_id"); id != "" {
				var err error
				{{.DomainL}}ID, err := uuid.Parse(id)
				if err != nil {
					return response.NewError(ErrInvalidID, http.StatusBadRequest)
				}

				{{.DomainVar}}, err := {{.DomainVar}}Core.QueryByID(ctx, {{.DomainL}}ID)
				if err != nil {
					switch {
					case errors.Is(err, {{.DomainL}}.ErrNotFound):
						return response.NewError(err, http.StatusNoContent)
					default:
						return fmt.Errorf("querybyid: {{.DomainL}}ID[%s]: %w", {{.DomainL}}ID, err)
					}
				}

                // userID = We need to know what user owns this record. It might
                // come from this domain directly or indirectly. QueryByID,
                // Delete, and Update will fail until this is properly set.
				ctx = set{{.DomainU}}(ctx, {{.DomainVar}})
			}

			claims := getClaims(ctx)
			if err := a.Authorize(ctx, claims, userID, rule); err != nil {
				return auth.NewAuthError("authorize: you are not authorized for that action, claims[%v] rule[%v]: %s", claims.Roles, rule, err)
			}

			return handler(ctx, w, r)
		}

		return h
	}

	return m
}
