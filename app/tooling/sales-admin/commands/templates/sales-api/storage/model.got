package {{.DomainL}}db

import (
	"fmt"
	"time"

	"github.com/ardanlabs/service/business/core/{{.DomainL}}"
	"github.com/google/uuid"
)

// db{{.DomainU}} represents an individual {{.DomainL}}.
type db{{.DomainU}} struct {
	ID          uuid.UUID `db:"{{.DomainL}}_id"`
	DateCreated time.Time `db:"date_created"`
	DateUpdated time.Time `db:"date_updated"`
}

// =============================================================================

func toDB{{.DomainU}}({{.DomainVar}} {{.DomainL}}.{{.DomainU}}) db{{.DomainU}} {
	{{.DomainVar}}DB := db{{.DomainU}}{
		ID:          {{.DomainVar}}.ID,
		DateCreated: {{.DomainVar}}.DateCreated.UTC(),
		DateUpdated: {{.DomainVar}}.DateUpdated.UTC(),
	}

	return {{.DomainVar}}DB
}

func toCore{{.DomainU}}(db{{.DomainVarU}} db{{.DomainU}}) ({{.DomainL}}.{{.DomainU}}, error) {
	{{.DomainVar}} := {{.DomainL}}.{{.DomainU}}{
		ID:          db{{.DomainVarU}}.ID,
		DateCreated: db{{.DomainVarU}}.DateCreated.In(time.Local),
		DateUpdated: db{{.DomainVarU}}.DateUpdated.In(time.Local),
	}

	return {{.DomainVar}}, nil
}

func toCore{{.DomainU}}Slice(db{{.DomainU}}s []db{{.DomainU}}) ([]{{.DomainL}}.{{.DomainU}}, error) {
	{{.DomainVar}}s := make([]{{.DomainL}}.{{.DomainU}}, len(db{{.DomainU}}s))

	for i, db{{.DomainVarU}} := range db{{.DomainU}}s {
		var err error
		{{.DomainVar}}s[i], err = toCore{{.DomainU}}(db{{.DomainVarU}})
		if err != nil {
			return nil, fmt.Errorf("parse type: %w", err)
		}
	}

	return {{.DomainVar}}s, nil
}
