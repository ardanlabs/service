// Package {{.DomainL}}grp maintains the group of handlers for {{.DomainL}} access.
package {{.DomainL}}grp

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"github.com/ardanlabs/service/business/core/{{.DomainL}}"
	"github.com/ardanlabs/service/business/data/page"
	"github.com/ardanlabs/service/business/web/v1/mid"
	"github.com/ardanlabs/service/business/web/v1/response"
	"github.com/ardanlabs/service/foundation/web"
)

// Set of error variables for handling home group errors.
var (
	ErrInvalidID = errors.New("ID is not in its proper form")
)

// Handlers manages the set of {{.DomainL}} enpoints.
type Handlers struct {
	{{.DomainL}} *{{.DomainL}}.Core
}

// New constructs a handlers for route access.
func New({{.DomainL}} *{{.DomainL}}.Core) *Handlers {
	return &Handlers{
		{{.DomainL}}: {{.DomainL}},
	}
}

// Create adds a new {{.DomainL}} to the system.
func (h *Handlers) Create(ctx context.Context, w http.ResponseWriter, r *http.Request) error {
	var app AppNew{{.DomainU}}
	if err := web.Decode(r, &app); err != nil {
		return response.NewError(err, http.StatusBadRequest)
	}

	{{.DomainNewVar}}, err := toCoreNew{{.DomainU}}(ctx, app)
	if err != nil {
		return response.NewError(err, http.StatusBadRequest)
	}

	{{.DomainVar}}, err := h.{{.DomainL}}.Create(ctx, {{.DomainNewVar}})
	if err != nil {
		return fmt.Errorf("create: {{.DomainVar}}[%+v]: %w", app, err)
	}

	return web.Respond(ctx, w, toApp{{.DomainU}}({{.DomainVar}}), http.StatusCreated)
}

// Update updates a {{.DomainL}} in the system.
func (h *Handlers) Update(ctx context.Context, w http.ResponseWriter, r *http.Request) error {
	var app AppUpdate{{.DomainU}}
	if err := web.Decode(r, &app); err != nil {
		return response.NewError(err, http.StatusBadRequest)
	}

	{{.DomainVar}} := mid.Get{{.DomainU}}(ctx)

	{{.DomainUpdVar}}, err := toCoreUpdate{{.DomainU}}(app)
	if err != nil {
		return response.NewError(err, http.StatusBadRequest)
	}

	{{.DomainVar}}, err = h.{{.DomainL}}.Update(ctx, {{.DomainVar}}, {{.DomainUpdVar}})
	if err != nil {
		return fmt.Errorf("update: {{.DomainL}}ID[%s] app[%+v]: %w", {{.DomainVar}}.ID, app, err)
	}

	return web.Respond(ctx, w, toApp{{.DomainU}}({{.DomainVar}}), http.StatusOK)
}

// Delete deletes a {{.DomainL}} from the system.
func (h *Handlers) Delete(ctx context.Context, w http.ResponseWriter, r *http.Request) error {
	{{.DomainVar}} := mid.Get{{.DomainU}}(ctx)

	if err := h.{{.DomainL}}.Delete(ctx, {{.DomainVar}}); err != nil {
		return fmt.Errorf("delete: {{.DomainL}}ID[%s]: %w", {{.DomainVar}}.ID, err)
	}

	return web.Respond(ctx, w, nil, http.StatusNoContent)
}

// Query returns a list of {{.DomainL}}s with paging.
func (h *Handlers) Query(ctx context.Context, w http.ResponseWriter, r *http.Request) error {
	page, err := page.Parse(r)
	if err != nil {
		return err
	}

	filter, err := parseFilter(r)
	if err != nil {
		return err
	}

	orderBy, err := parseOrder(r)
	if err != nil {
		return err
	}

	{{.DomainVar}}s, err := h.{{.DomainL}}.Query(ctx, filter, orderBy, page.Number, page.RowsPerPage)
	if err != nil {
		return fmt.Errorf("query: %w", err)
	}

	total, err := h.{{.DomainL}}.Count(ctx, filter)
	if err != nil {
		return fmt.Errorf("count: %w", err)
	}

	return web.Respond(ctx, w, response.NewPageDocument(toApp{{.DomainU}}s({{.DomainVar}}s), total, page.Number, page.RowsPerPage), http.StatusOK)
}

// QueryByID returns a {{.DomainL}} by its ID.
func (h *Handlers) QueryByID(ctx context.Context, w http.ResponseWriter, r *http.Request) error {
	return web.Respond(ctx, w, toApp{{.DomainU}}(mid.Get{{.DomainU}}(ctx)), http.StatusOK)
}
