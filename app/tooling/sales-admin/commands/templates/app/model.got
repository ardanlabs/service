package {{.DomainL}}grp

import (
	"context"
	"time"

	"github.com/ardanlabs/service/business/core/{{.DomainL}}"
	"github.com/ardanlabs/service/foundation/validate"
)

// App{{.DomainU}} represents an individual {{.DomainL}}.
type App{{.DomainU}} struct {
    ID          string `json:"id"`
    DateCreated string `json:"dateCreated"`
    DateUpdated string `json:"dateUpdated"`
}

func toApp{{.DomainU}}({{.DomainVar}} {{.DomainL}}.{{.DomainU}}) App{{.DomainU}} {
	return App{{.DomainU}}{
		ID:          {{.DomainVar}}.ID.String(),
		DateCreated: {{.DomainVar}}.DateCreated.Format(time.RFC3339),
		DateUpdated: {{.DomainVar}}.DateUpdated.Format(time.RFC3339),
	}
}

func toApp{{.DomainU}}s({{.DomainVar}}s []{{.DomainL}}.{{.DomainU}}) []App{{.DomainU}} {
	items := make([]App{{.DomainU}}, len({{.DomainVar}}s))
	for i, {{.DomainVar}} := range {{.DomainVar}}s {
		items[i] = toApp{{.DomainU}}({{.DomainVar}})
	}

	return items
}

// =============================================================================

// AppNew{{.DomainU}} is what we require from clients when adding a {{.DomainL}}.
type AppNew{{.DomainU}} struct {
}

func toCoreNew{{.DomainU}}(ctx context.Context, app AppNew{{.DomainU}}) ({{.DomainL}}.New{{.DomainU}}, error) {
	{{.DomainVar}} := {{.DomainL}}.New{{.DomainU}}{
	}

	return {{.DomainVar}}, nil
}

// Validate checks if the data in the model is considered clean.
func (app AppNew{{.DomainU}}) Validate() error {
	if err := validate.Check(app); err != nil {
		return err
	}

	return nil
}

// =============================================================================

// AppUpdate{{.DomainU}} contains informations needed to update a {{.DomainL}}.
type AppUpdate{{.DomainU}} struct {
}

func toCoreUpdate{{.DomainU}}(app AppUpdate{{.DomainU}}) ({{.DomainL}}.Update{{.DomainU}}, error) {
	core := {{.DomainL}}.Update{{.DomainU}}{
	}

	return core, nil
}

// Validate checks the data in the model is considered clean.
func (app AppUpdate{{.DomainU}}) Validate() error {
	if err := validate.Check(app); err != nil {
		return err
	}

	return nil
}
