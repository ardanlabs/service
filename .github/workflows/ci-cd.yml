# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  # AWS secrets - these will be configured in repository settings
  REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  IMAGE_NAME: ardanlabs/service

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.5
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: servicetest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go 1.24.6
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.6'
          cache: true

      - name: Verify Go version
        run: |
          go version
          which go

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: |
          CGO_ENABLED=0 go test -v ./...
        env:
          SALES_DB_HOST: localhost
          SALES_DB_PORT: 5432
          SALES_DB_USER: postgres
          SALES_DB_PASSWORD: postgres
          SALES_DB_NAME: servicetest

      - name: Run vet
        run: CGO_ENABLED=0 go vet ./...

      - name: Install and run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck -checks=all ./...

      - name: Install and run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push sales service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./zarf/docker/dockerfile.sales
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-sales:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push auth service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./zarf/docker/dockerfile.auth
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-auth:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push metrics service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./zarf/docker/dockerfile.metrics
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-metrics:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Note: Deployment jobs have been moved to separate workflow files:
  # - deploy-staging.yml
  # - deploy-production.yml
  # These can be triggered manually or via slash commands in PRs
